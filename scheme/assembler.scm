(define (integer->hex n) (number->string n 16))
(define out-pos 0)
(define (emit-byte n)
  (cond ((> n 255) '(error out-of-range))
        ((< n -127) '(error out-of-range))
        (else (display (integer->hex n))
              (display " ")
              (set! out-pos (+ out-pos 1)) )))
(define (org pos) (set! out-pos pos))
(define (until pos data)
  (cond ((> pos out-pos)
          (emit-byte data)
          (until pos data))
        ((< pos out-pos)
          '(error "pos is smaller than current pos"))
        (else #t) ))
(define (assemble opcode . args)
  (display (list opcode args)))
(define-syntax asm
  (syntax-rules ()
                ((_ (opcode . args) ...)
                 (begin (apply assemble (cons (quote opcode) (quote args))) ...) )))
(define (protected-mode)
  (asm
    (mov eax cr0)
    (or eax 1)
    (mov cr0 eax)))
(org #x7bb400)
(until (+ #x7bb400 10) 64)
(newline)
(protected-mode)(newline)
