'(load "/opt/local/lib/gambit-c/syntax-case.scm")
(define (integer->hex n) (number->string n 16))
(define out-pos 0)
(define (emit-byte n)
  (cond ((> n 255) '(error out-of-range))
        ((< n -127) '(error out-of-range))
        (else (display (integer->hex n))
              (display " ")
              (set! out-pos (+ out-pos 1)) )))
(define (emit-bytes list-of-bytes)
  (map emit-byte list-of-bytes))
(define (word->bytes n)
  (let ((hi (quotient n 256))
	 (lo (remainder n 256)))
    (list lo hi)))
(define (dword->bytes n)
  (let* ((hi (quotient n 16777216))
	 (hirest (remainder n 16777216))
	 (lo (quotient hirest 65536))
	 (lorest (remainder hirest 65536)))
    (append (word->bytes lorest) (list lo hi))))
(define (emit-word n)
  (emit-bytes (word->bytes n)))
(define (emit-dword n)
  (emit-bytes (dword->bytes n)))
(define (org pos) (set! out-pos pos))
(define (until pos data)
  (cond ((> pos out-pos)
          (emit-byte data)
          (until pos data))
        ((< pos out-pos)
          '(error "pos is smaller than current pos"))
        (else #t) ))
(define (assemble opcode . args)
  (define get-dest car)
  (define get-src cadr)
  (define (register? r) (assq r '(eax)))
  (define (control-register? r) (assq r '(cr0)))
  (define (mov args)
    (cond ((and (register? (get-dest args))
		(control-register? (get-src args)))
	   (emit-byte #x0f)
	   (emit-byte #x20)
	   (emit-byte #xc0))
	  ((and (control-register? (get-dest args))
		(register? (get-src args)))
	   (emit-byte #x0f)
	   (emit-byte #x22)
	   (emit-byte #xc0))
	  (else
	    'todo)))
  (define (or args)
    (cond ((and (register? (get-dest args))
		(immediate? (get-src args)))
	   (emit-byte #x66)
	   (emit-byte #x0d)
	   (emit-dword (get-src args)))
	  (else
	    'todo)))
  ((eval opcode) args))
(define-syntax asm
  (syntax-rules ()
                ((_ (opcode . args) ...)
                 (begin (apply assemble (cons (quote opcode) (quote args))) ...) )))
(define (protected-mode)
  (asm
    (mov eax cr0) 	'(0f 20 c0)
    (or eax 1)		'(66 0d 01 00 00 00)
    (mov cr0 eax)))	'(0f 22 c0)
(define (make-mbr)
  (org #x7bb400)
  (protected-mode)
  (until (+ #x7bb400 #x1b8) 64)
  (until (+ #x7bb400 #x1bc) 65)
  (until (+ #x7bb400 #x1be) 0)
  (until (+ #x7bb400 #x1fe) 255) '(partition table)
  (emit-byte #x55) (emit-byte #xaa) '(MBR signature))
(protected-mode)
(newline)
